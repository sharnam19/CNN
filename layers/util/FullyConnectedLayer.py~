
class FullyConnectedLayer:
    """
    Fully Connected Layer
    
    x: Input of shape (N,D)
    w: Weights of shape (D,H)
    b: Biases of shape (H,)

    """
    
    def __init__(self,x,w,b):
        self.x = x
        self.w = w
        self.b = b

    def forward(self):
        """
        Returns out of shape (N,H)
        """
        out = self.x.dot(self.w)+self.b
        return out

    def backprop(self,dOut):
        """
        Input:
        dOut: Upstream gradient of shape (N,H)
        Returns Derivative wrt the inputs x,w,b i.e
        dx,dw,db
        """
        
        dx = np.dot(dOut,self.w.T)
        dw = np.dot(self.x.t,dOut)
        db = np.sum(dOut,axis=0)

        return dx,dw,db
